/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

/***************************** Include Files *********************************/

#include "zed_hdmi_display.h"
#include "xtpg.h"
#ifdef XPAR_ZED_HDMI_DISPLAY_PIXELQ_OP_0_DEVICE_ID
#define MAX_HEIGHT 1080
#define MAX_WIDTH 1920
#include "xpixelq_op.h"
#endif

/**************************** Type Definitions *******************************/

/***************** Macros (Inline Functions) Definitions *********************/

/************************** Function Prototypes ******************************/

int XTpgSelfTestExample(u16 DeviceId);
int XLinebufOpConfig(u16 DeviceId);

/************************** Variable Definitions *****************************/
zed_hdmi_display_t demo;
XTpg Tpg; /**<Instance of the TPG Device */

#ifdef XPAR_ZED_HDMI_DISPLAY_PIXELQ_OP_0_DEVICE_ID
XPixelq_op FilterOp;
#endif

int main() {
	int Status;

	/*
	 *  Run the self test example
	 */

	// init_platform();
	demo.uBaseAddr_IIC_HdmiOut = XPAR_ZED_HDMI_IIC_0_BASEADDR;
	demo.uDeviceId_VTC_HdmioGenerator = XPAR_ZED_HDMI_DISPLAY_V_TC_0_DEVICE_ID;
	demo.uDeviceId_VDMA_HdmiDisplay =
	XPAR_ZED_HDMI_DISPLAY_AXI_VDMA_0_DEVICE_ID;
	demo.uBaseAddr_MEM_HdmiDisplay = XPAR_DDR_MEM_BASEADDR + 0x10000000;
	demo.uNumFrames_HdmiDisplay = XPAR_AXIVDMA_0_NUM_FSTORES;

	Status = XTpgSelfTestExample((u16) XPAR_ZED_HDMI_DISPLAY_V_TPG_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("TPG Example Failed\r\n");
		return XST_FAILURE;
	}

#ifdef XPAR_ZED_HDMI_DISPLAY_PIXELQ_OP_0_DEVICE_ID
	Status = XPixelq_op_Initialize(&FilterOp, (u16) XPAR_ZED_HDMI_DISPLAY_PIXELQ_OP_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("XPAR_ZED_HDMI_DISPLAY_PIXELQ_OP_0_DEVICE_ID Failed\r\n");
		return XST_FAILURE;
	}

	XPixelq_op_SetRos(&FilterOp, );
	XPixelq_op_SetCols(&FilterOp, );
	XPixel_op_Start(&FilterOp);
#endif

	zed_hdmi_display_init(&demo);

	cleanup_platform();
	return 0;
}

/*****************************************************************************/
/**
 *
 * This function does a minimal test on the XTpg driver.
 *
 *
 * @param	DeviceId is the XPAR_<TPG_instance>_DEVICE_ID value from
 *           	xparameters.h.
 *
 * @return
 *		- XST_SUCCESS if successful
 * 		- XST_FAILURE if failed.
 *
 * @note		None
 *
 ******************************************************************************/
int XTpgSelfTestExample(u16 DeviceId) {
	int Status;
	XTpg_Config *Config;
	/*
	 * Initialize the TPG driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XTpg_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XTpg_CfgInitialize(&Tpg, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to check hardware build.
	 */

	Status = XTpg_SelfTest(&Tpg);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XTpg_RegUpdateDisable(&Tpg);
	u32 bayer = XTpg_GetBayerPhase(&Tpg);
	if (XTPG_BAYER_PHASE_TURNOFF == bayer) {
		XTpg_SetBayerPhase(&Tpg, XTPG_BAYER_PHASE_RGRG);
	} else {
		XTpg_SetBayerPhase(&Tpg, XTPG_BAYER_PHASE_GBGB);
		// XTpg_SetBayerPhase(&Tpg, XTPG_BAYER_PHASE_BGBG);
	}

	XTpg_SetBackground(&Tpg, XTPG_BLACK_AND_WHITE_CHECKERBOARD);
	XTpg_SetBackground(&Tpg, XTPG_TARAN_BARS);
	XTPg_EnableNoise(&Tpg);
	XTpg_RegUpdateEnable(&Tpg);

	XTpg_Enable(&Tpg);

	return XST_SUCCESS;
}

#ifdef XPAR_ZED_HDMI_DISPLAY_LINEBUF_OP_0_DEVICE_ID
/*****************************************************************************/
/**
 *
 * This function initialize the XLinebuf_op driver.
 *
 *
 * @param	DeviceId is the XPAR_<XLinebuf_op_instance>_DEVICE_ID value from
 *           	xparameters.h.
 *
 * @return
 *		- XST_SUCCESS if successful
 * 		- XST_FAILURE if failed.
 *
 * @note		None
 *
 ******************************************************************************/
int XLinebufOpConfig(u16 DeviceId) {
	int Status;
	XLinebuf_op_Config *Config;

	/*
	 * Initialize the TPG driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XLinebuf_op_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XLinebuf_op_CfgInitialize(&Lineop, Config->Control_bus_BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XLinebuf_op_Start(&Lineop);

	return XST_SUCCESS;
}
#endif
